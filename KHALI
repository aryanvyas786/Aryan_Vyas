import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

interface JobSeeker {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  contact: string;
  resume: string | null;
  profileImg: string | null;
  gender: string;
//   hobbies: string; 
  Agency: {
    contact: string;
    id: number;
    firstName: string;
    lastName: string;
    // hobbies: string;
    email: string;
    profileImg: string | null;
  } | null;
}

interface Agency {
  id: number;
  firstName: string;
  lastName: string;
  email: string;
  profileImg: string | null;
  gender: string; 
  JobSeekers: JobSeeker[];
}

const Profile = () => {
  const { userId } = useParams<{ userId: string }>();
  const [userData, setUserData] = useState<JobSeeker | Agency | null>(null);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchUserDetails = async () => {
      try {
        const response = await axios.get(`http://localhost:3000/userDetails/${userId}`);
        setUserData(response.data);
      } catch (error) {
        console.error('Error fetching user details:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUserDetails();
  }, [userId]);

  if (loading) {
    return <div className="text-center">Loading...</div>;
  }

  if (!userData) {
    return <div className="text-center">User not found.</div>;
  }

  const handleLogout = () => {
    localStorage.removeItem('token');
    alert('Successfully Logged Out');
    navigate('/login');
  };

  const isJobSeeker = (user: JobSeeker | Agency): user is JobSeeker => {
    return (user as JobSeeker).Agency !== undefined;
  };


  return (
    <div className="container mt-5">
      <h2 className="text-center mb-4 profile-header">{isJobSeeker(userData) ? 'Job Seeker Profile' : 'Agency Profile'}</h2>
      <div className="card mb-4 shadow-lg">
        <div className="card-body">
          <h3 className="card-title">{userData.firstName} {userData.lastName}</h3>
          <p className="card-text"><strong>Email:</strong> {userData.email}</p>
          <p className="card-text"><strong>Gender:</strong> {userData.gender}</p> 
          <img src={`http://localhost:3000/${userData.profileImg}`} alt="profileImg" className="img-fluid rounded agency-img" />

          {isJobSeeker(userData) && (
            <>
              <p className="card-text"><strong>Contact: </strong> {userData.contact}</p>
              {userData.resume && (
                <p className="card-text">
                  <strong>Resume:</strong> <a href={`http://localhost:3000/${userData.resume}`} target="_blank" className="btn btn-link resume-link">Download</a>
                </p>
              )}
              {userData.Agency && (
                <div className="mt-4">
                  <h4>Agency Details:</h4>
                  <p><strong>Name:</strong> {userData.Agency.firstName} {userData.Agency.lastName}</p>
                  <p><strong>Email:</strong> {userData.Agency.email}</p>
                  <p><strong>Contact No:</strong> {userData.Agency.contact}</p>
                  {/* <p><strong>Hobbies:</strong> {userData.Agency.hobbies}</p> */}
                  {userData.Agency.profileImg && (
                    <img src={`http://localhost:3000/${userData.Agency.profileImg}`} alt="Agency" className="img-fluid rounded agency-img" />
                  )}
                </div>
              )}
            </>
          )}

          {!isJobSeeker(userData) && (
            <div className="mt-4">
              <h4>Job Seekers:</h4>
              <ul className="list-group">
                {userData.JobSeekers.map(jobSeeker => (
                  <li key={jobSeeker.id} className="list-group-item job-seeker-item">
                    <strong>{jobSeeker.firstName} {jobSeeker.lastName}</strong> - {jobSeeker.email}<br />
                    <span>Contact: {jobSeeker.contact}</span><br />
                    <span>Gender: {jobSeeker.gender}</span><br /> 
                    {/* <span>Hobbies: {jobSeeker.hobbies}</span><br /> */}
                    {jobSeeker.resume && <a href={`http://localhost:3000/${jobSeeker.resume}`} target="_blank" className="btn btn-link">Download Resume</a>}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>
      </div>
      <button onClick={handleLogout} className="btn btn-danger">
        Logout
      </button>
    </div>
  );
};

export default Profile;
gfruweryguwehaf
controller
// controllers/UserController.ts
import { Request, Response } from 'express';
import Userdetails from '../models/Userdetails';
const bcrypt = require('bcrypt');
var jwt = require('jsonwebtoken');
import dotenv from 'dotenv';
import { sendWelcomeEmail } from '../mail/nodemailerConfig';
dotenv.config();


export const check = (req: Request, res: Response) => {
    res.send("Hello world")
}

export const getAgencies = async (req: Request, res: Response):Promise<void> => {
    try {
        const agencies = await Userdetails.findAll({
            where: { role: 2 }, 
            attributes: ['id', 'firstName', 'lastName','email','gender','contact','hobbies','profileImg'], // Select only needed fields
        });
         res.json(agencies);
         return
    } catch (error:any) {
        console.error('Error fetching agencies:', error);
         res.status(500).json({ message: 'Server error', error: error.message });
         return
    }
};

// export const addUser = async (req: Request, res: Response):Promise<void> => {
//     try {
//         const { firstName, lastName, email, password, gender, contact, role, agencyId } = req.body;
//     //   console.log("req.body data.....",req.body)
//         if (!firstName || !lastName || !email || !password || !gender || !contact || role === undefined) {
//              res.status(400).json({ message: 'All fields are required.' });
//              return
//         }

//         const existingUser = await Userdetails.findOne({ where: { email } });
//         if (existingUser) {
//           res.status(409).json({ message: 'Email already exists' });
//           return;
//         }
//         const hashedPassword = await bcrypt.hash(password, 10);
//         // Create the user
//         const user = await Userdetails.create({
//             firstName,
//             lastName,
//             email,
//             password:hashedPassword,
//             gender,
//             contact,
//             role, // 1 for Job seeker, 2 for Agency
//             agencyId: role === 1 ? agencyId : null
//         });

//          res.status(201).json({ message: 'User created successfully', user });
//          return
//     } catch (error:any) {
//         console.error('Error creating user:', error);
//          res.status(500).json({ message: 'Server error', error: error.message });
//          return
//     }
// };




export const addUser = async (req: Request, res: Response): Promise<void> => {
    try {
        const { firstName, lastName, email, gender, contact, role, agencyId , hobbies} = req.body;

        if (!firstName || !lastName || !email || !gender || !contact || role === undefined) {
            res.status(400).json({ message: 'All fields are required.' });
            return;
        }

        const existingUser = await Userdetails.findOne({ where: { email } });
        if (existingUser) {
            res.status(409).json({ message: 'Email already exists' });
            return;
        }
        const files: any = req?.files;
        const imgPath = files['profileImg'] ? files['profileImg'][0].path : null;
        const resumePath = files['resume'] ? files['resume'][0].path : null;

        const autogeneratedPassword = "12345678";
        const hashedPassword = await bcrypt.hash(autogeneratedPassword, 10);

        const user = await Userdetails.create({
            firstName,
            lastName,
            email,
            password: hashedPassword,
            gender,
            contact,
            hobbies,
            role, 
            // profileImg: role === '1' ? imgPath : null, 
            profileImg: imgPath, 
            resume: role === '1' ? resumePath : null, 
            agencyId: role === '1' ? agencyId : null
        });
        // await sendWelcomeEmail(user.email, user.firstName,autogeneratedPassword);
        res.status(201).json({ message: 'User created successfully', user });
    } catch (error: any) {
        console.error('Error creating user:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
    }
};




export const userDetails = async (req: Request, res: Response): Promise<void> => {
    const userId = parseInt(req.params.userId, 10);

    try {
        const jobSeeker = await Userdetails.findOne({
            where: { id: userId, role: 1 }, 
            include: [{
                model: Userdetails,
                as: 'Agency',
                attributes: ['id', 'firstName', 'lastName','email','profileImg','contact','gender'],
            }]
        });

        if (jobSeeker) {
            res.json(jobSeeker);
            return;
        }

        const agency = await Userdetails.findOne({
            where: { id: userId, role: 2 }, 
            attributes: ['id', 'firstName', 'lastName','email','profileImg','gender'],
            include: [{
                model: Userdetails,
                as: 'JobSeekers', 
                where: { role: 1 },
                attributes: ['id', 'firstName', 'lastName','email','contact','resume','profileImg','gender'],
                required: false, 
            }]
        });

        if (agency) {
            res.json(agency);
            return;
        }

        res.status(404).json({ message: 'User not found' });
        return;

    } catch (error: any) {
        console.error('Error fetching user details:', error);
        res.status(500).json({ message: 'Server error', error: error.message });
        return;
    }
};



export const loginUser = async (req:Request, res:Response):Promise<void> => {
    try {
        const { email, password } = req.body;
        const user = await Userdetails.findOne({ where: { email } });
        if (!user) {
            res.status(404).json({ message: 'User not found' });
            return;
        }
        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            res.status(401).json({ message: 'Invalid credentials' });
            return;
        }
        const token = jwt.sign({ id: user.id }, "secret_keu", { expiresIn: '1h' });
        res.status(200).json({ message: 'Login successful', token, userId: user.id });
    } catch (err: any) {
        res.status(500).json({ message: err.message });
    }
};


rhsbAGF
ROYTERS
// routes/userRoutes.ts
import { Router } from 'express';
import { getAgencies, addUser, loginUser, check, userDetails } from '../controller/userController';
// import { getAgencies, addUser, getJobSeekersByAgency, getAgencyForJobSeeker, loginUser, check, userDetails } from '../controller/userController';
import {validateUser} from '../middleware/validateUser'
import { upload } from '../middleware/upload';

const router = Router();

router.get('/', check);
router.get('/agencies', getAgencies);
router.post('/signup', upload.fields([{name:"profileImg"},{name:"resume"}]), validateUser,addUser);
// router.post('/signup', validateUser, addUser);
router.get('/userDetails/:userId', userDetails)
router.post('/login',loginUser)

// router.get('/agency/:agencyId', getJobSeekersByAgency);
// router.get('/jobseeker/:jobSeekerId', getAgencyForJobSeeker);
export default router;
